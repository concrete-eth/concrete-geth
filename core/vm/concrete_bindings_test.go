package vm

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/params"
	"github.com/holiman/uint256"
	"github.com/stretchr/testify/require"
)

func newBlockContext() BlockContext {
	var (
		block0Hash = crypto.Keccak256Hash([]byte("test0"))
		block1Hash = crypto.Keccak256Hash([]byte("test1"))
		randomHash = crypto.Keccak256Hash([]byte("random hash"))
	)

	getHash := func(blockNumber uint64) common.Hash {
		switch blockNumber {
		case 0:
			return block0Hash
		case 1:
			return block1Hash
		}
		return common.Hash{}
	}

	vmctx := BlockContext{
		CanTransfer: func(StateDB, common.Address, *uint256.Int) bool { return true },
		Transfer:    func(StateDB, common.Address, common.Address, *uint256.Int) {},
		BlockNumber: big.NewInt(0),
		GetHash:     getHash,
		Time:        50,
		GasLimit:    1000,
		Difficulty:  big.NewInt(23456146),
		BaseFee:     big.NewInt(739657255),
		Coinbase:    common.HexToAddress("0x0854167430392BBc2D15Dd1Cc17e761897AF31C9"),
		Random:      &randomHash,
	}

	return vmctx
}

func TestConcreteBlockContext(t *testing.T) {
	r := require.New(t)
	blockCtx := newBlockContext()
	ccBlockCtx := concreteBlockContext{ctx: &blockCtx}
	var (
		block0Hash = crypto.Keccak256Hash([]byte("test0"))
		block1Hash = crypto.Keccak256Hash([]byte("test1"))
	)

	t.Run("GetHash", func(t *testing.T) {
		r.Equal(block0Hash, ccBlockCtx.GetHash(0))
		r.Equal(block1Hash, ccBlockCtx.GetHash(1))
	})

	t.Run("Timestamp", func(t *testing.T) {
		r.Equal(blockCtx.Time, ccBlockCtx.Timestamp())
	})

	t.Run("BlockNumber", func(t *testing.T) {
		r.Equal(blockCtx.BlockNumber.Uint64(), ccBlockCtx.BlockNumber())
	})

	t.Run("GasLimit", func(t *testing.T) {
		r.Equal(blockCtx.GasLimit, ccBlockCtx.GasLimit())
	})

	t.Run("Difficulty", func(t *testing.T) {
		r.Equal(uint256.MustFromBig(blockCtx.Difficulty), ccBlockCtx.Difficulty())
	})

	t.Run("BaseFee", func(t *testing.T) {
		r.Equal(uint256.MustFromBig(blockCtx.BaseFee), ccBlockCtx.BaseFee())
	})

	t.Run("Coinbase", func(t *testing.T) {
		r.Equal(blockCtx.Coinbase, ccBlockCtx.Coinbase())
	})

	t.Run("Random", func(t *testing.T) {
		r.Equal(*blockCtx.Random, ccBlockCtx.Random())
	})
}

func TestEVMCallStatic(t *testing.T) {
	var (
		r              = require.New(t)
		address        = common.BytesToAddress([]byte("CallStaticTestContract"))
		statedb, _     = state.New(types.EmptyRootHash, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
		config         = Config{}
		vmctx          = newBlockContext()
		gas            = uint64(100)
		accountRef     = AccountRef(common.Address{})
		contract       = NewContract(accountRef, accountRef, new(uint256.Int), gas)
		expectedReturn = []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3}
	)

	statedb.CreateAccount(address)
	// This example bytecode pushes 1 and 2 onto the stack, adds them, and returns the result. (Does NOT modify state)
	statedb.SetCode(address, hexutil.MustDecode("0x600260010160005260206000F3"))
	statedb.Finalise(true)
	vmenv := NewEVM(vmctx, TxContext{}, statedb, params.AllEthashProtocolChanges, config)

	ccVmenv := concreteEVM{
		evm:      vmenv,
		contract: contract,
	}

	ret, remainingGas, err := ccVmenv.CallStatic(address, nil, gas)

	r.NoError(err, "Call should not return an error")
	r.NotNil(ret, "Return data should not be nil")
	r.Less(remainingGas, gas, "Gas used should be less than the provided gas")

	r.Equal(ret, expectedReturn, "Return data should be the result of the addition of 2 + 1")

}

func TestEVMCall(t *testing.T) {
	var (
		r             = require.New(t)
		address       = common.BytesToAddress([]byte("CallTestContract"))
		statedb, _    = state.New(types.EmptyRootHash, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
		config        = Config{}
		vmctx         = newBlockContext()
		gas           = uint64(10000000)
		accountRef    = AccountRef(common.Address{})
		contract      = NewContract(accountRef, accountRef, new(uint256.Int), gas)
		expectedState = common.HexToHash("0x1")
	)
	statedb.CreateAccount(address)
	statedb.AddAddressToAccessList(address)
	//This example bytecode saves value 1 in storage (Modify state)
	statedb.SetCode(address, hexutil.MustDecode("0x6001600055600054602060005260206000f3"))
	statedb.Finalise(true)
	vmenv := NewEVM(vmctx, TxContext{}, statedb, params.AllEthashProtocolChanges, config)
	ccVmenv := concreteEVM{
		evm:      vmenv,
		contract: contract,
	}

	ret, remainingGas, err := ccVmenv.Call(address, nil, gas, new(uint256.Int))

	r.NoError(err, "Call should not return an error")
	r.NotNil(ret, "Return data should not be nil")
	r.Less(remainingGas, gas, "Gas used should be less than the provided gas")

	r.Equal(expectedState, statedb.GetState(address, common.Hash{}), "State should have changed by storing value 1 in Storage")

}

// func TestEVMCallDelegate(t *testing.T) {
// 	var (
// 		r             = require.New(t)
// 		address       = common.BytesToAddress([]byte("CallDelegateTestContract"))
// 		targetAddress = common.BytesToAddress([]byte("CallDelegateTestContract2"))
// 		statedb, _    = state.New(types.EmptyRootHash, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
// 		config        = Config{}
// 		vmctx         = newBlockContext()
// 		gas           = uint64(100000)
// 		accountRef    = AccountRef(common.Address{})
// 		contract      = NewContract(accountRef, accountRef, new(uint256.Int), gas)
// 		expectedState = common.HexToHash("0x5")
// 	)

// 	statedb.CreateAccount(address)
// 	statedb.CreateAccount(targetAddress)

// 	callerContractCode := common.FromHex("60806040526040518060400160405280600981526020017f536f6d657468696e6700000000000000000000000000000000000000000000008152505f90816100479190610293565b50348015610053575f80fd5b50610362565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806100d457607f821691505b6020821081036100e7576100e6610090565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261010e565b610153868361010e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61019761019261018d8461016b565b610174565b61016b565b9050919050565b5f819050919050565b6101b08361017d565b6101c46101bc8261019e565b84845461011a565b825550505050565b5f90565b6101d86101cc565b6101e38184846101a7565b505050565b5b81811015610206576101fb5f826101d0565b6001810190506101e9565b5050565b601f82111561024b5761021c816100ed565b610225846100ff565b81016020851015610234578190505b610248610240856100ff565b8301826101e8565b50505b505050565b5f82821c905092915050565b5f61026b5f1984600802610250565b1980831691505092915050565b5f610283838361025c565b9150826002028217905092915050565b61029c82610059565b67ffffffffffffffff8111156102b5576102b4610063565b5b6102bf82546100bd565b6102ca82828561020a565b5f60209050601f8311600181146102fb575f84156102e9578287015190505b6102f38582610278565b86555061035a565b601f198416610309866100ed565b5f5b828110156103305784890151825560018201915060208501945060208101905061030b565b8683101561034d5784890151610349601f89168261025c565b8355505b6001600288020188555050505b505050505050565b61050c8061036f5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80632801617e14610038578063e21f37ce14610054575b5f80fd5b610052600480360381019061004d9190610294565b610072565b005b61005c6101ab565b604051610069919061032f565b60405180910390f35b5f808273ffffffffffffffffffffffffffffffffffffffff166360fd1c4f60e01b6040516024016100a290610399565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161010c91906103fb565b5f60405180830381855af49150503d805f8114610144576040519150601f19603f3d011682016040523d82523d5f602084013e610149565b606091505b50915091505f1515821515036101a6575f8151111561016b5780518082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019d9061045b565b60405180910390fd5b505050565b5f80546101b7906104a6565b80601f01602080910402602001604051908101604052809291908181526020018280546101e3906104a6565b801561022e5780601f106102055761010080835404028352916020019161022e565b820191905f5260205f20905b81548152906001019060200180831161021157829003601f168201915b505050505081565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102638261023a565b9050919050565b61027381610259565b811461027d575f80fd5b50565b5f8135905061028e8161026a565b92915050565b5f602082840312156102a9576102a8610236565b5b5f6102b684828501610280565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610301826102bf565b61030b81856102c9565b935061031b8185602086016102d9565b610324816102e7565b840191505092915050565b5f6020820190508181035f83015261034781846102f7565b905092915050565b7f486520697320416c6976650000000000000000000000000000000000000000005f82015250565b5f610383600b836102c9565b915061038e8261034f565b602082019050919050565b5f6020820190508181035f8301526103b081610377565b9050919050565b5f81519050919050565b5f81905092915050565b5f6103d5826103b7565b6103df81856103c1565b93506103ef8185602086016102d9565b80840191505092915050565b5f61040682846103cb565b915081905092915050565b7f46756e6374696f6e2063616c6c207265766572746564000000000000000000005f82015250565b5f6104456016836102c9565b915061045082610411565b602082019050919050565b5f6020820190508181035f83015261047281610439565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806104bd57607f821691505b6020821081036104d0576104cf610479565b5b5091905056fea264697066735822122037befee983f774e180c193d317771ecfb3ba82f1a61f715a8532428934ed79c964736f6c63430008190033")
// 	targetContractCode := common.FromHex("60806040526040518060400160405280600f81526020017f49206c6f766520736f6c696469747900000000000000000000000000000000008152505f90816100479190610293565b50348015610053575f80fd5b50610362565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806100d457607f821691505b6020821081036100e7576100e6610090565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261010e565b610153868361010e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61019761019261018d8461016b565b610174565b61016b565b9050919050565b5f819050919050565b6101b08361017d565b6101c46101bc8261019e565b84845461011a565b825550505050565b5f90565b6101d86101cc565b6101e38184846101a7565b505050565b5b81811015610206576101fb5f826101d0565b6001810190506101e9565b5050565b601f82111561024b5761021c816100ed565b610225846100ff565b81016020851015610234578190505b610248610240856100ff565b8301826101e8565b50505b505050565b5f82821c905092915050565b5f61026b5f1984600802610250565b1980831691505092915050565b5f610283838361025c565b9150826002028217905092915050565b61029c82610059565b67ffffffffffffffff8111156102b5576102b4610063565b5b6102bf82546100bd565b6102ca82828561020a565b5f60209050601f8311600181146102fb575f84156102e9578287015190505b6102f38582610278565b86555061035a565b601f198416610309866100ed565b5f5b828110156103305784890151825560018201915060208501945060208101905061030b565b8683101561034d5784890151610349601f89168261025c565b8355505b6001600288020188555050505b505050505050565b6105938061036f5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806360fd1c4f14610038578063e21f37ce14610054575b5f80fd5b610052600480360381019061004d919061017b565b610072565b005b61005c610087565b6040516100699190610236565b60405180910390f35b81815f9182610082929190610490565b505050565b5f8054610093906102ba565b80601f01602080910402602001604051908101604052809291908181526020018280546100bf906102ba565b801561010a5780601f106100e15761010080835404028352916020019161010a565b820191905f5260205f20905b8154815290600101906020018083116100ed57829003601f168201915b505050505081565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261013b5761013a61011a565b5b8235905067ffffffffffffffff8111156101585761015761011e565b5b60208301915083600182028301111561017457610173610122565b5b9250929050565b5f806020838503121561019157610190610112565b5b5f83013567ffffffffffffffff8111156101ae576101ad610116565b5b6101ba85828601610126565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610208826101c6565b61021281856101d0565b93506102228185602086016101e0565b61022b816101ee565b840191505092915050565b5f6020820190508181035f83015261024e81846101fe565b905092915050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806102d157607f821691505b6020821081036102e4576102e361028d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261030b565b610350868361030b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61039461038f61038a84610368565b610371565b610368565b9050919050565b5f819050919050565b6103ad8361037a565b6103c16103b98261039b565b848454610317565b825550505050565b5f90565b6103d56103c9565b6103e08184846103a4565b505050565b5b81811015610403576103f85f826103cd565b6001810190506103e6565b5050565b601f82111561044857610419816102ea565b610422846102fc565b81016020851015610431578190505b61044561043d856102fc565b8301826103e5565b50505b505050565b5f82821c905092915050565b5f6104685f198460080261044d565b1980831691505092915050565b5f6104808383610459565b9150826002028217905092915050565b61049a8383610256565b67ffffffffffffffff8111156104b3576104b2610260565b5b6104bd82546102ba565b6104c8828285610407565b5f601f8311600181146104f5575f84156104e3578287013590505b6104ed8582610475565b865550610554565b601f198416610503866102ea565b5f5b8281101561052a57848901358255600182019150602085019450602081019050610505565b868310156105475784890135610543601f891682610459565b8355505b6001600288020188555050505b5050505050505056fea2646970667358221220010b9b8f29f7a29221087b95579facbde0985bf644b9021fdc81f8922655cd3c64736f6c63430008190033")
// 	statedb.SetCode(address, callerContractCode)
// 	statedb.SetCode(targetAddress, targetContractCode)
// 	statedb.Finalise(true)

// 	vmenv := NewEVM(vmctx, TxContext{}, statedb, params.AllEthashProtocolChanges, config)
// 	ccVmenv := concreteEVM{
// 		evm:      vmenv,
// 		contract: contract,
// 	}

// 	ret, remainingGas, err := ccVmenv.CallDelegate(address, []byte{}, gas)

// 	r.NoError(err, "Call should not return an error")
// 	r.NotNil(ret, "Return data should not be nil")
// 	r.Less(remainingGas, gas, "Gas used should be less than the provided gas")

// 	r.Equal(expectedState, statedb.GetState(address, common.Hash{}), "State should have changed by storing value 1 in Storage")

// }

func TestEVMCreate(t *testing.T) {
	var (
		r          = require.New(t)
		statedb, _ = state.New(types.EmptyRootHash, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)
		config     = Config{}
		vmctx      = newBlockContext()
		gas        = uint64(10000)
		accountRef = AccountRef(common.Address{})
		contract   = NewContract(accountRef, accountRef, new(uint256.Int), gas)
		code       = hexutil.MustDecode("0x600260010160005260206000F3")
	)

	statedb.Finalise(true)
	vmenv := NewEVM(vmctx, TxContext{}, statedb, params.AllEthashProtocolChanges, config)
	ccVmenv := concreteEVM{
		evm:      vmenv,
		contract: contract,
	}

	t.Run("Create", func(t *testing.T) {
		expectedContractAddr := crypto.CreateAddress(ccVmenv.contract.CallerAddress, statedb.GetNonce(ccVmenv.contract.CallerAddress))

		ret, addr, remainingGas, err := ccVmenv.Create(code, gas, new(uint256.Int))

		r.NoError(err, "Call should not return an error")
		r.NotNil(ret, "Return data should not be nil")
		r.Less(remainingGas, gas, "Gas used should be less than the provided gas")
		r.Equal(expectedContractAddr, addr, "Contracts not matching")
		r.Equal(statedb.GetCode(addr), ret, "State not correct")
	})

	t.Run("Create2", func(t *testing.T) {
		var (
			salt                 = uint256.NewInt(3521)
			codeAndHash          = &codeAndHash{code: code}
			expectedContractAddr = crypto.CreateAddress2(ccVmenv.contract.CallerAddress, salt.Bytes32(), codeAndHash.Hash().Bytes())
		)

		ret, addr, remainingGas, err := ccVmenv.Create2(code, gas, new(uint256.Int), uint256.NewInt(3521))

		r.NoError(err, "Call should not return an error")
		r.NotNil(ret, "Return data should not be nil")
		r.Less(remainingGas, gas, "Gas used should be less than the provided gas")
		r.Equal(expectedContractAddr, addr, "Contracts not matching")
		r.Equal(statedb.GetCode(addr), ret, "State not correct")
	})
}
