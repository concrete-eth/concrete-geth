// SPDX-License-Identifier: MIT
pragma solidity {{.Pragma}};

/* Autogenerated file. Do not edit manually. */

{{- if $.ImportPaths }}
{{ range .ImportPaths }}
import "{{.}}";
{{- end }}
{{- end }}

library {{$.Name}} {
    address constant precompileAddress = address({{$.Address}});
    {{- range $method := $.Methods }}

    function {{$method.Name}}({{$method.Inputs}}) internal{{if $method.IsStatic}} view{{end}}{{if $method.Outputs}} returns ({{$method.Outputs}}){{end}} {
        (bool success, {{if $method.Outputs}}bytes memory data{{end}}) = precompileAddress.{{if $method.IsStatic}}staticcall{{else}}call{{end}}(
            abi.encodeWithSignature("{{$method.Signature}}"{{if $method.InputNames}}, {{$method.InputNames}}{{end}})
        );
        require(success);
        {{- if $method.Outputs }}
        return abi.decode(data, ({{$method.OutputTypes}}));
        {{- end }}
    }
    {{- end }}
}
