/* Autogenerated file. Do not edit manually. */

package {{$.Package}}

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	{{$.TableStructName}}DefaultKey = crypto.Keccak256([]byte("datamod.v1.{{$.TableStructName}}"))
// )

func {{$.TableStructName}}DefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.{{$.TableStructName}}"))
}

type {{$.RowStructName}} struct {
	lib.DatastoreStructWithParent
}

func New{{$.RowStructName}}(dsSlot lib.DatastoreSlot) *{{$.RowStructName}} {
	sizes := {{$.SizesStr}}
	return &{{$.RowStructName}}{*lib.NewDatastoreStructWithParent(dsSlot, sizes, nil, nil)}
}

func New{{$.RowStructName}}WithParent(dsSlot lib.DatastoreSlot, parent lib.Parent, rowKey lib.RowKey) *{{$.RowStructName}} {
	sizes := {{$.SizesStr}}
	return &{{$.RowStructName}}{*lib.NewDatastoreStructWithParent(dsSlot, sizes, parent, rowKey)}
}

func (v *{{$.RowStructName}}) Get() (
{{- range $value := $.Schema.Values }}
	{{$value.Name}} {{if eq $value.Type.Type 2}}*{{end}}{{$value.Type.GoType}},
{{- end }}
) {
	return {{ range $value := $.Schema.Values }}
		{{- if lt $value.Type.Type 2 -}}
		codec.{{$value.Type.DecodeFunc}}({{$value.Type.Size}}, {{if eq $value.Type.Type 0}}v.GetField{{else}}v.GetField_bytes{{end}}({{$value.Index}}))
		{{- else -}}
		New{{$value.Type.GoType}}FromSlot(v.GetField_slot({{$value.Index}}))
		{{- end }}
		{{- if ne .Index (sub (len $.Schema.Values) 1) }},
		{{end}}
	{{- end }}
}

func (v *{{$.RowStructName}}) Set(
{{- range $value := $.Schema.Values }}
{{- if lt $value.Type.Type 2 }}
	{{$value.Name}} {{$value.Type.GoType}},
{{- end }}
{{- end }}
) {
{{- range $value := $.Schema.Values }}
{{- if lt $value.Type.Type 2 }}
	{{if eq $value.Type.Type 0}}v.SetField{{else if eq $value.Type.Type 1}}v.SetField_bytes{{end -}}
	({{$value.Index}}, codec.{{$value.Type.EncodeFunc}}({{$value.Type.Size}}, {{$value.Name}}))
{{- end }}
{{- end }}
}
{{range $value := .Schema.Values}}
{{- if lt $value.Type.Type 2 }}
func (v *{{$.RowStructName}}) Get{{$value.Title}}() {{$value.Type.GoType}} {
	data := {{if eq $value.Type.Type 0}}v.GetField{{else}}v.GetField_bytes{{end}}({{$value.Index}})
	return codec.{{$value.Type.DecodeFunc}}({{$value.Type.Size}}, data)
}

func (v *{{$.RowStructName}}) Set{{$value.Title}}(value {{$value.Type.GoType}}) {
	data := codec.{{$value.Type.EncodeFunc}}({{$value.Type.Size}}, value)
	{{if eq $value.Type.Type 0}}v.SetField{{else}}v.SetField_bytes{{end}}({{$value.Index}}, data)
}
{{ else }}
func (v *{{$.RowStructName}}) Get{{$value.Title}}() *{{$value.Type.GoType}} {
	dsSlot := v.GetField_slot({{$value.Index}})
	return New{{$value.Type.GoType}}FromSlot(dsSlot)
}
{{ end}}
{{- end}}
type {{$.TableStructName}} struct {
	dsSlot lib.DatastoreSlot
	parent lib.Parent
	tableId lib.TableId
}

func New{{$.TableStructName}}(ds lib.Datastore) *{{$.TableStructName}} {
	dsSlot := ds.Get({{$.TableStructName}}DefaultKey())
	return &{{$.TableStructName}}{
		dsSlot: dsSlot,
		parent: nil,
		tableId: nil,
	}
}

func New{{$.TableStructName}}WithParent(ds lib.Datastore, parent lib.Parent, tableId lib.TableId) *{{$.TableStructName}} {
	t := New{{$.TableStructName}}(ds)
	t.parent = parent
	t.tableId = tableId
	return t
}

func New{{$.TableStructName}}FromSlot(dsSlot lib.DatastoreSlot) *{{$.TableStructName}} {
	return &{{$.TableStructName}}{dsSlot: dsSlot}
}
{{ if $.Schema.Keys }}
func (m *{{$.TableStructName}}) Get(
{{- range $key := $.Schema.Keys }}
	{{$key.Name}} {{$key.Type.GoType}},
{{- end }}
) *{{$.RowStructName}} {
	dsSlot := m.dsSlot.Mapping().GetNested(
		{{- range $key := $.Schema.Keys }}
		codec.{{$key.Type.EncodeFunc}}({{$key.Type.Size}}, {{$key.Name}}),
		{{- end }}
	)
	return New{{$.RowStructName}}WithParent(dsSlot, m, lib.RowKey{
		{{ range $key := $.Schema.Keys }}{{$key.Name}},{{ end }}
	})
}
{{- else }}
func (m *{{$.TableStructName}}) Get() *{{$.RowStructName}} {
	return New{{$.RowStructName}}WithParent(m.dsSlot, m, nil)
}
{{- end }}

func (m *{{$.TableStructName}}) SetFieldCallback(tableId lib.TableId, rowKey lib.RowKey, columnIndex int, value []byte) {
	if m.parent != nil {
		m.parent.SetFieldCallback(m.tableId, rowKey, columnIndex, value)
	}
}