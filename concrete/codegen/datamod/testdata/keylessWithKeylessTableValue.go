/* Autogenerated file. Do not edit manually. */

package testdata

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	KeylessWithKeylessTableValueDefaultKey = crypto.Keccak256([]byte("datamod.v1.KeylessWithKeylessTableValue"))
// )

func KeylessWithKeylessTableValueDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.KeylessWithKeylessTableValue"))
}

type KeylessWithKeylessTableValueRow struct {
	lib.DatastoreStruct
}

func NewKeylessWithKeylessTableValueRow(dsSlot lib.DatastoreSlot) *KeylessWithKeylessTableValueRow {
	sizes := []int{32}
	return &KeylessWithKeylessTableValueRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *KeylessWithKeylessTableValueRow) Get() (
	*KeylessTable,
) {
	return NewKeylessTableFromSlot(v.GetField_slot(0))
}

func (v *KeylessWithKeylessTableValueRow) Set(
) {
}

func (v *KeylessWithKeylessTableValueRow) GetValueTable() *KeylessTable {
	dsSlot := v.GetField_slot(0)
	return NewKeylessTableFromSlot(dsSlot)
}

type KeylessWithKeylessTableValue = KeylessWithKeylessTableValueRow

func NewKeylessWithKeylessTableValue(ds lib.Datastore) *KeylessWithKeylessTableValueRow {
	dsSlot := ds.Get(KeylessWithKeylessTableValueDefaultKey())
	return NewKeylessWithKeylessTableValueRow(dsSlot)
}

func NewKeylessWithKeylessTableValueFromSlot(dsSlot lib.DatastoreSlot) *KeylessWithKeylessTableValueRow {
	return NewKeylessWithKeylessTableValueRow(dsSlot)
}
