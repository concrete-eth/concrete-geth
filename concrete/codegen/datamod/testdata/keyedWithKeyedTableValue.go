/* Autogenerated file. Do not edit manually. */

package testdata

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	KeyedWithKeyedTableValueDefaultKey = crypto.Keccak256([]byte("datamod.v1.KeyedWithKeyedTableValue"))
// )

func KeyedWithKeyedTableValueDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.KeyedWithKeyedTableValue"))
}

type KeyedWithKeyedTableValueRow struct {
	lib.DatastoreStruct
}

func NewKeyedWithKeyedTableValueRow(dsSlot lib.DatastoreSlot) *KeyedWithKeyedTableValueRow {
	sizes := []int{32}
	return &KeyedWithKeyedTableValueRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *KeyedWithKeyedTableValueRow) Get() (
	*KeyedTable,
) {
	return NewKeyedTableFromSlot(v.GetField_slot(0))
}

func (v *KeyedWithKeyedTableValueRow) Set(
) {
}

func (v *KeyedWithKeyedTableValueRow) GetValueTable() *KeyedTable {
	dsSlot := v.GetField_slot(0)
	return NewKeyedTableFromSlot(dsSlot)
}

type KeyedWithKeyedTableValue struct {
	dsSlot lib.DatastoreSlot
}

func NewKeyedWithKeyedTableValue(ds lib.Datastore) *KeyedWithKeyedTableValue {
	dsSlot := ds.Get(KeyedWithKeyedTableValueDefaultKey())
	return &KeyedWithKeyedTableValue{dsSlot}
}

func NewKeyedWithKeyedTableValueFromSlot(dsSlot lib.DatastoreSlot) *KeyedWithKeyedTableValue {
	return &KeyedWithKeyedTableValue{dsSlot}
}

func (m *KeyedWithKeyedTableValue) Get(
	keyUint *uint256.Int,
) *KeyedWithKeyedTableValueRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint256(32, keyUint),
	)
	return NewKeyedWithKeyedTableValueRow(dsSlot)
}
