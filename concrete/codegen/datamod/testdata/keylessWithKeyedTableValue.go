/* Autogenerated file. Do not edit manually. */

package testdata

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	KeylessWithKeyedTableValueDefaultKey = crypto.Keccak256([]byte("datamod.v1.KeylessWithKeyedTableValue"))
// )

func KeylessWithKeyedTableValueDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.KeylessWithKeyedTableValue"))
}

type KeylessWithKeyedTableValueRow struct {
	lib.DatastoreStruct
}

func NewKeylessWithKeyedTableValueRow(dsSlot lib.DatastoreSlot) *KeylessWithKeyedTableValueRow {
	sizes := []int{32}
	return &KeylessWithKeyedTableValueRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *KeylessWithKeyedTableValueRow) Get() (
	*KeyedTable,
) {
	return NewKeyedTableFromSlot(v.GetField_slot(0))
}

func (v *KeylessWithKeyedTableValueRow) Set(
) {
}

func (v *KeylessWithKeyedTableValueRow) GetValueTable() *KeyedTable {
	dsSlot := v.GetField_slot(0)
	return NewKeyedTableFromSlot(dsSlot)
}

type KeylessWithKeyedTableValue = KeylessWithKeyedTableValueRow

func NewKeylessWithKeyedTableValue(ds lib.Datastore) *KeylessWithKeyedTableValueRow {
	dsSlot := ds.Get(KeylessWithKeyedTableValueDefaultKey())
	return NewKeylessWithKeyedTableValueRow(dsSlot)
}

func NewKeylessWithKeyedTableValueFromSlot(dsSlot lib.DatastoreSlot) *KeylessWithKeyedTableValueRow {
	return NewKeylessWithKeyedTableValueRow(dsSlot)
}
