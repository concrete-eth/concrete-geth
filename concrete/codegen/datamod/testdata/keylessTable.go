/* Autogenerated file. Do not edit manually. */

package testdata

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	KeylessTableDefaultKey = crypto.Keccak256([]byte("datamod.v1.KeylessTable"))
// )

func KeylessTableDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.KeylessTable"))
}

type KeylessTableRow struct {
	lib.DatastoreStruct
}

func NewKeylessTableRow(dsSlot lib.DatastoreSlot) *KeylessTableRow {
	sizes := []int{32, 32, 32, 1, 20, 16}
	return &KeylessTableRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *KeylessTableRow) Get() (
	*uint256.Int,
	string,
	[]byte,
	bool,
	common.Address,
	[]byte,
) {
	return codec.DecodeUint256(32, v.GetField(0)),
		codec.DecodeString(32, v.GetField_bytes(1)),
		codec.DecodeBytes(32, v.GetField_bytes(2)),
		codec.DecodeBool(1, v.GetField(3)),
		codec.DecodeAddress(20, v.GetField(4)),
		codec.DecodeFixedBytes(16, v.GetField(5))
}

func (v *KeylessTableRow) Set(
	valueUint *uint256.Int,
	valueString string,
	valueBytes []byte,
	valueBool bool,
	valueAddress common.Address,
	valueBytes16 []byte,
) {
	v.SetField(0, codec.EncodeUint256(32, valueUint))
	v.SetField_bytes(1, codec.EncodeString(32, valueString))
	v.SetField_bytes(2, codec.EncodeBytes(32, valueBytes))
	v.SetField(3, codec.EncodeBool(1, valueBool))
	v.SetField(4, codec.EncodeAddress(20, valueAddress))
	v.SetField(5, codec.EncodeFixedBytes(16, valueBytes16))
}

func (v *KeylessTableRow) GetValueUint() *uint256.Int {
	data := v.GetField(0)
	return codec.DecodeUint256(32, data)
}

func (v *KeylessTableRow) SetValueUint(value *uint256.Int) {
	data := codec.EncodeUint256(32, value)
	v.SetField(0, data)
}

func (v *KeylessTableRow) GetValueString() string {
	data := v.GetField_bytes(1)
	return codec.DecodeString(32, data)
}

func (v *KeylessTableRow) SetValueString(value string) {
	data := codec.EncodeString(32, value)
	v.SetField_bytes(1, data)
}

func (v *KeylessTableRow) GetValueBytes() []byte {
	data := v.GetField_bytes(2)
	return codec.DecodeBytes(32, data)
}

func (v *KeylessTableRow) SetValueBytes(value []byte) {
	data := codec.EncodeBytes(32, value)
	v.SetField_bytes(2, data)
}

func (v *KeylessTableRow) GetValueBool() bool {
	data := v.GetField(3)
	return codec.DecodeBool(1, data)
}

func (v *KeylessTableRow) SetValueBool(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(3, data)
}

func (v *KeylessTableRow) GetValueAddress() common.Address {
	data := v.GetField(4)
	return codec.DecodeAddress(20, data)
}

func (v *KeylessTableRow) SetValueAddress(value common.Address) {
	data := codec.EncodeAddress(20, value)
	v.SetField(4, data)
}

func (v *KeylessTableRow) GetValueBytes16() []byte {
	data := v.GetField(5)
	return codec.DecodeFixedBytes(16, data)
}

func (v *KeylessTableRow) SetValueBytes16(value []byte) {
	data := codec.EncodeFixedBytes(16, value)
	v.SetField(5, data)
}

type KeylessTable = KeylessTableRow

func NewKeylessTable(ds lib.Datastore) *KeylessTableRow {
	dsSlot := ds.Get(KeylessTableDefaultKey())
	return NewKeylessTableRow(dsSlot)
}

func NewKeylessTableFromSlot(dsSlot lib.DatastoreSlot) *KeylessTableRow {
	return NewKeylessTableRow(dsSlot)
}
